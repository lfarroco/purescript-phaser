module Graphics.Phaser.Animation where

-- | (Mostly) autogenerated from https://raw.githubusercontent.com/photonstorm/phaser/master/src/animations/Animation.js
import Prelude

import Effect (Effect)
import Graphics.Phaser.ForeignTypes (Animation, AnimationManager, Animations, JSONAnimation, TextureManager, AnimationState, AnimationFrame)
import Utils.FFI (_getProp, _method0, _method1, _method2, _new3, _return0, _return1, _return2, phaser)

animations :: Effect Animations
animations = phaser >>= _getProp "Animations"

-- | A Frame based Animation.
-- | 
-- | Animations in Phaser consist of a sequence of `AnimationFrame` objects, which are managed by
-- | this class, along with properties that impact playback, such as the animations frame rate
-- | or delay.
-- | 
-- | This class contains all of the properties and methods needed to handle playback of the animation
-- | directly to an `AnimationState` instance, which is owned by a Sprite, or similar Game Object.
-- | 
-- | You don't typically create an instance of this class directly, but instead go via
-- | either the `AnimationManager` or the `AnimationState` and use their `create` methods,
-- | depending on if you need a global animation, or local to a specific Sprite.
new :: AnimationManager -> String -> Animation -> Effect Animation
new mngr key' animation = do 
  namespace <- animations
  fn <- _getProp "Animation" namespace
  _new3 fn mngr key' animation

-- | A reference to the global Animation Manager.
manager :: Animation -> Effect AnimationManager
manager = _getProp "manager"

-- | The unique identifying string for this animation.
key :: Animation -> Effect String
key = _getProp "key"

-- | A frame based animation (as opposed to a bone based animation)
type' :: Animation -> Effect String
type' = _getProp "type"

-- | Extract all the frame data into the frames array.
frames :: Animation -> Effect (Array AnimationFrame)
frames = _getProp "frames"

-- | The frame rate of playback in frames per second (default 24 if duration is null)
frameRate :: Animation -> Effect Number
frameRate = _getProp "frameRate"

-- | How long the animation should play for, in milliseconds.
-- | If the `frameRate` property has been set then it overrides this value,
-- | otherwise the `frameRate` is derived from `duration`.
duration :: Animation -> Effect Number
duration = _getProp "duration"

-- | How many ms per frame, not including frame specific modifiers.
msPerFrame :: Animation -> Effect Number
msPerFrame = _getProp "msPerFrame"

-- | Skip frames if the time lags, or always advanced anyway?
skipMissedFrames :: Animation -> Effect Boolean
skipMissedFrames = _getProp "skipMissedFrames"

-- | The delay in ms before the playback will begin.
delay :: Animation -> Effect Number
delay = _getProp "delay"

-- | Number of times to repeat the animation. Set to -1 to repeat forever.
repeat :: Animation -> Effect Number
repeat = _getProp "repeat"

-- | The delay in ms before the a repeat play starts.
repeatDelay :: Animation -> Effect Number
repeatDelay = _getProp "repeatDelay"

-- | Should the animation yoyo (reverse back down to the start) before repeating?
yoyo :: Animation -> Effect Boolean
yoyo = _getProp "yoyo"

-- | If the animation has a delay set, before playback will begin, this
-- | controls when the first frame is set on the Sprite. If this property
-- | is 'false' then the frame is set only after the delay has expired.
-- | This is the default behavior.
showBeforeDelay :: Animation -> Effect Boolean
showBeforeDelay = _getProp "showBeforeDelay"

-- | Should the GameObject's `visible` property be set to `true` when the animation starts to play?
showOnStart :: Animation -> Effect Boolean
showOnStart = _getProp "showOnStart"

-- | Should the GameObject's `visible` property be set to `false` when the animation finishes?
hideOnComplete :: Animation -> Effect Boolean
hideOnComplete = _getProp "hideOnComplete"

-- | Global pause. All Game Objects using this Animation instance are impacted by this property.
paused :: Animation -> Effect Boolean
paused = _getProp "paused"

-- | Gets the total number of frames in this animation.
-- |
getTotalFrames :: Animation -> Effect Number
getTotalFrames = _return0 "getTotalFrames"

-- | Calculates the duration, frame rate and msPerFrame values.
-- | Parameters:
-- |     target - Phaser.Animations.Animation - The target to set the values on.
-- |     totalFrames - Number - The total number of frames in the animation.
-- |
calculateDuration :: Animation -> Number -> Animation -> Effect Unit
calculateDuration = _return2 "calculateDuration"

-- | Add frames to the end of the animation.
-- | Parameters:
-- |     config - String - Either a string, in which case it will use all frames from a texture with the matching key, or an array of Animation Frame configuration objects.
-- |
addFrame :: String -> Animation -> Effect Animation
addFrame = _method1 "addFrame"

-- | Add frame/s into the animation.
-- | Parameters:
-- |     index - Number - The index to insert the frame at within the animation.
-- |     config - String - Either a string, in which case it will use all frames from a texture with the matching key, or an array of Animation Frame configuration objects.
-- |
addFrameAt :: Number -> String -> Animation -> Effect Animation
addFrameAt = _method2 "addFrameAt"

-- | Check if the given frame index is valid.
-- | Parameters:
-- |     index - Number - The index to be checked.
-- |
checkFrame :: Number -> Animation -> Effect Boolean
checkFrame = _return1 "checkFrame"

-- | Called internally when this Animation first starts to play.
-- | Sets the accumulator and nextTick properties.
-- | Parameters:
-- |     state - Phaser.Animations.AnimationState - The Animation State belonging to the Game Object invoking this call.
-- |
getFirstTick :: AnimationState -> Animation -> Effect Unit
getFirstTick = _return1 "getFirstTick"

-- | Returns the AnimationFrame at the provided index
-- | Parameters:
-- |     index - Number - The index in the AnimationFrame array
-- |
getFrameAt :: Number -> Animation -> Effect AnimationFrame
getFrameAt = _return1 "getFrameAt"

-- | Creates AnimationFrame instances based on the given frame data.
-- | Parameters:
-- |     textureManager - Phaser.Textures.TextureManager - A reference to the global Texture Manager.
-- |     frames - String - Either a string, in which case it will use all frames from a texture with the matching key, or an array of Animation Frame configuration objects.
-- |
getFrames :: TextureManager -> String -> Animation -> Effect Unit
getFrames = _return2 "getFrames"

-- | Called internally. Sets the accumulator and nextTick values of the current Animation.
-- | Parameters:
-- |     state - Phaser.Animations.AnimationState - The Animation State belonging to the Game Object invoking this call.
-- |
getNextTick :: AnimationState -> Animation -> Effect Unit
getNextTick = _return1 "getNextTick"

-- | Returns the frame closest to the given progress value between 0 and 1.
-- | Parameters:
-- |     value - Number - A value between 0 and 1.
-- |
getFrameByProgress :: Number -> Animation -> Effect AnimationFrame
getFrameByProgress = _return1 "getFrameByProgress"

-- | Advance the animation frame.
-- | Parameters:
-- |     state - Phaser.Animations.AnimationState - The Animation State to advance.
-- |
nextFrame :: AnimationState -> Animation -> Effect Unit
nextFrame = _return1 "nextFrame"

-- | Returns the animation last frame.
-- |
getLastFrame :: Animation -> Effect AnimationFrame
getLastFrame = _return0 "getLastFrame"

-- | Called internally when the Animation is playing backwards.
-- | Sets the previous frame, causing a yoyo, repeat, complete or update, accordingly.
-- | Parameters:
-- |     state - Phaser.Animations.AnimationState - The Animation State belonging to the Game Object invoking this call.
-- |
previousFrame :: AnimationState -> Animation -> Effect Unit
previousFrame = _return1 "previousFrame"

-- | Removes the given AnimationFrame from this Animation instance.
-- | This is a global action. Any Game Object using this Animation will be impacted by this change.
-- | Parameters:
-- |     frame - Phaser.Animations.AnimationFrame - The AnimationFrame to be removed.
-- |
removeFrame :: AnimationFrame -> Animation -> Effect Animation
removeFrame = _method1 "removeFrame"

-- | Removes a frame from the AnimationFrame array at the provided index
-- | and updates the animation accordingly.
-- | Parameters:
-- |     index - Number - The index in the AnimationFrame array
-- |
removeFrameAt :: Number -> Animation -> Effect Animation
removeFrameAt = _method1 "removeFrameAt"

-- | Called internally during playback. Forces the animation to repeat, providing there are enough counts left
-- | in the repeat counter.
-- | Parameters:
-- |     state - Phaser.Animations.AnimationState - The Animation State belonging to the Game Object invoking this call.
-- |
repeatAnimation :: AnimationState -> Animation -> Effect Unit
repeatAnimation = _return1 "repeatAnimation"

-- | Converts the animation data to JSON.
-- |
toJSON :: Animation -> Effect JSONAnimation
toJSON = _return0 "toJSON"

-- | Called internally whenever frames are added to, or removed from, this Animation.
-- |
updateFrameSequence :: Animation -> Effect Animation
updateFrameSequence = _method0 "updateFrameSequence"

-- | Pauses playback of this Animation. The paused state is set immediately.
-- |
pause :: Animation -> Effect Animation
pause = _method0 "pause"

-- | Resumes playback of this Animation. The paused state is reset immediately.
-- |
resume :: Animation -> Effect Animation
resume = _method0 "resume"

-- | Destroys this Animation instance. It will remove all event listeners,
-- | remove this animation and its key from the global Animation Manager,
-- | and then destroy all Animation Frames in turn.
-- |
destroy :: Animation -> Effect Unit
destroy = _return0 "destroy"
