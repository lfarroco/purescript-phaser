module Graphics.Phaser.AnimationManager where

-- | (Mostly) autogenerated from https://raw.githubusercontent.com/photonstorm/phaser/master/src/animations/AnimationManager.js
import Prelude
import Effect (Effect)
import Graphics.Phaser.Animation (animations)
import Graphics.Phaser.Animation.Types (GenerateFrameNumbersConfig)
import Graphics.Phaser.CoreTypes (class GameObject, PhaserMap)
import Graphics.Phaser.ForeignTypes (Animation, AnimationManager, JSONAnimation, PhaserGame, TextureManager)
import Utils.FFI (_getProp, _method0, _method1, _method2, _method3, _new1, _return0, _return1, _return2)

-- | The Animation Manager.
-- | 
-- | Animations are managed by the global Animation Manager. This is a singleton class that is
-- | responsible for creating and delivering animations and their corresponding data to all Game Objects.
-- | Unlike plugins it is owned by the Game instance, not the Scene.
-- | 
-- | Sprites and other Game Objects get the data they need from the AnimationManager.
new :: PhaserGame -> Effect AnimationManager
new game' = do
  namespace <- animations
  fn <- _getProp "AnimationManager" namespace
  _new1 fn game'

-- | A reference to the Phaser.Game instance.
game :: AnimationManager -> Effect PhaserGame
game = _getProp "game"

-- | A reference to the Texture Manager.
textureManager :: AnimationManager -> Effect TextureManager
textureManager = _getProp "textureManager"

-- | The global time scale of the Animation Manager.
-- | 
-- | This scales the time delta between two frames, thus influencing the speed of time for the Animation Manager.
globalTimeScale :: AnimationManager -> Effect Number
globalTimeScale = _getProp "globalTimeScale"

-- | The Animations registered in the Animation Manager.
-- | 
-- | This map should be modified with the {@link #add} and {@link #create} methods of the Animation Manager.
anims :: AnimationManager -> Effect (PhaserMap String Animation)
anims = _getProp "anims"

-- | A list of animation mix times.
-- | 
-- | See the {@link #setMix} method for more details.
mixes :: AnimationManager -> Effect (PhaserMap String Animation)
mixes = _getProp "mixes"

-- | Whether the Animation Manager is paused along with all of its Animations.
paused :: AnimationManager -> Effect Boolean
paused = _getProp "paused"

-- | The name of this Animation Manager.
name :: AnimationManager -> Effect String
name = _getProp "name"

-- | Registers event listeners after the Game boots.
-- |
boot :: AnimationManager -> Effect Unit
boot = _return0 "boot"

-- | Adds a mix between two animations.
-- | 
-- | Mixing allows you to specify a unique delay between a pairing of animations.
-- | 
-- | When playing Animation A on a Game Object, if you then play Animation B, and a
-- | mix exists, it will wait for the specified delay to be over before playing Animation B.
-- | 
-- | This allows you to customise smoothing between different types of animation, such
-- | as blending between an idle and a walk state, or a running and a firing state.
-- | 
-- | Note that mixing is only applied if you use the `Sprite.play` method. If you opt to use
-- | `playAfterRepeat` or `playAfterDelay` instead, those will take priority and the mix
-- | delay will not be used.
-- | 
-- | To update an existing mix, just call this method with the new delay.
-- | 
-- | To remove a mix pairing, see the `removeMix` method.
-- | Parameters:
-- |     animA - String - The string-based key, or instance of, Animation A.
-- |     animB - String - The string-based key, or instance of, Animation B.
-- |     delay - Number - The delay, in milliseconds, to wait when transitioning from Animation A to B.
-- |
addMix :: String -> String -> Number -> AnimationManager -> Effect AnimationManager
addMix = _method3 "addMix"

-- | Removes a mix between two animations.
-- | 
-- | Mixing allows you to specify a unique delay between a pairing of animations.
-- | 
-- | Calling this method lets you remove those pairings. You can either remove
-- | it between `animA` and `animB`, or if you do not provide the `animB` parameter,
-- | it will remove all `animA` mixes.
-- | 
-- | If you wish to update an existing mix instead, call the `addMix` method with the
-- | new delay.
-- | Parameters:
-- |     animA - String - The string-based key, or instance of, Animation A.
-- |
removeMix :: String -> AnimationManager -> Effect AnimationManager
removeMix = _method1 "removeMix"

-- | Returns the mix delay between two animations.
-- | 
-- | If no mix has been set-up, this method will return zero.
-- | 
-- | If you wish to create, or update, a new mix, call the `addMix` method.
-- | If you wish to remove a mix, call the `removeMix` method.
-- | Parameters:
-- |     animA - String - The string-based key, or instance of, Animation A.
-- |     animB - String - The string-based key, or instance of, Animation B.
-- |
getMix :: String -> String -> AnimationManager -> Effect Number
getMix = _return2 "getMix"

-- | Adds an existing Animation to the Animation Manager.
-- | Parameters:
-- |     key - String - The key under which the Animation should be added. The Animation will be updated with it. Must be unique.
-- |     animation - Phaser.Animations.Animation - The Animation which should be added to the Animation Manager.
-- |
add :: String -> Animation -> AnimationManager -> Effect AnimationManager
add = _method2 "add"

-- | Checks to see if the given key is already in use within the Animation Manager or not.
-- | 
-- | Animations are global. Keys created in one scene can be used from any other Scene in your game. They are not Scene specific.
-- | Parameters:
-- |     key - String - The key of the Animation to check.
-- |
exists :: String -> AnimationManager -> Effect Boolean
exists = _return1 "exists"

-- | Create one, or more animations from a loaded Aseprite JSON file.
-- | 
-- | Aseprite is a powerful animated sprite editor and pixel art tool.
-- | 
-- | You can find more details at https://www.aseprite.org/
-- | 
-- | To export a compatible JSON file in Aseprite, please do the following:
-- | 
-- | 1. Go to "File - Export Sprite Sheet"
-- | 
-- | 2. On the **Layout** tab:
-- | 2a. Set the "Sheet type" to "Packed"
-- | 2b. Set the "Constraints" to "None"
-- | 2c. Check the "Merge Duplicates" checkbox
-- | 
-- | 3. On the **Sprite** tab:
-- | 3a. Set "Layers" to "Visible layers"
-- | 3b. Set "Frames" to "All frames", unless you only wish to export a sub-set of tags
-- | 
-- | 4. On the **Borders** tab:
-- | 4a. Check the "Trim Sprite" and "Trim Cells" options
-- | 4b. Ensure "Border Padding", "Spacing" and "Inner Padding" are all > 0 (1 is usually enough)
-- | 
-- | 5. On the **Output** tab:
-- | 5a. Check "Output File", give your image a name and make sure you choose "png files" as the file type
-- | 5b. Check "JSON Data" and give your json file a name
-- | 5c. The JSON Data type can be either a Hash or Array, Phaser doesn't mind.
-- | 5d. Make sure "Tags" is checked in the Meta options
-- | 5e. In the "Item Filename" input box, make sure it says just "{frame}" and nothing more.
-- | 
-- | 6. Click export
-- | 
-- | This was tested with Aseprite 1.2.25.
-- | 
-- | This will export a png and json file which you can load using the Aseprite Loader, i.e.:
-- | 
-- | ```javascript
-- | function preload ()
-- | {
-- |     this.load.path = 'assets/animations/aseprite/';
-- |     this.load.aseprite('paladin', 'paladin.png', 'paladin.json');
-- | }
-- | ```
-- | 
-- | Once loaded, you can call this method from within a Scene with the 'atlas' key:
-- | 
-- | ```javascript
-- | this.anims.createFromAseprite('paladin');
-- | ```
-- | 
-- | Any animations defined in the JSON will now be available to use in Phaser and you play them
-- | via their Tag name. For example, if you have an animation called 'War Cry' on your Aseprite timeline,
-- | you can play it in Phaser using that Tag name:
-- | 
-- | ```javascript
-- | this.add.sprite(400, 300).play('War Cry');
-- | ```
-- | 
-- | When calling this method you can optionally provide an array of tag names, and only those animations
-- | will be created. For example:
-- | 
-- | ```javascript
-- | this.anims.createFromAseprite('paladin', [ 'step', 'War Cry', 'Magnum Break' ]);
-- | ```
-- | 
-- | This will only create the 3 animations defined. Note that the tag names are case-sensitive.
-- | Parameters:
-- |     key - String - The key of the loaded Aseprite atlas. It must have been loaded prior to calling this method.
-- |
createFromAseprite :: String -> AnimationManager -> Effect Unit
createFromAseprite = _return1 "createFromAseprite"

-- | Creates a new Animation and adds it to the Animation Manager.
-- | 
-- | Animations are global. Once created, you can use them in any Scene in your game. They are not Scene specific.
-- | 
-- | If an invalid key is given this method will return `false`.
-- | 
-- | If you pass the key of an animation that already exists in the Animation Manager, that animation will be returned.
-- | 
-- | A brand new animation is only created if the key is valid and not already in use.
-- | 
-- | If you wish to re-use an existing key, call `AnimationManager.remove` first, then this method.
-- | Parameters:
-- |     config - Phaser.Types.Animations.Animation - The configuration settings for the Animation.
-- |
create :: Animation -> AnimationManager -> Effect Unit
create = _return1 "create"

-- | Loads this Animation Manager's Animations and settings from a JSON object.
-- | Parameters:
-- |     data - String - The JSON object to parse.
-- |
fromJSON :: String -> AnimationManager -> Effect Unit
fromJSON = _return1 "fromJSON"

-- | Generate an array of {@link Phaser.Types.Animations.AnimationFrame} objects from a texture key and configuration object.
-- | 
-- | Generates objects with string based frame names, as configured by the given {@link Phaser.Types.Animations.GenerateFrameNames}.
-- | 
-- | It's a helper method, designed to make it easier for you to extract all of the frame names from texture atlases.
-- | 
-- | If you're working with a sprite sheet, see the `generateFrameNumbers` method instead.
-- | 
-- | Example:
-- | 
-- | If you have a texture atlases loaded called `gems` and it contains 6 frames called `ruby_0001`, `ruby_0002`, and so on,
-- | then you can call this method using: `this.anims.generateFrameNames('gems', { prefix: 'ruby_', start: 1, end: 6, zeroPad: 4 })`.
-- | 
-- | The `end` value tells it to select frames 1 through 6, incrementally numbered, all starting with the prefix `ruby_`. The `zeroPad`
-- | value tells it how many zeroes pad out the numbers. To create an animation using this method, you can do:
-- | 
-- | ```javascript
-- | this.anims.create({
-- |   key: 'ruby',
-- |   repeat: -1,
-- |   frames: this.anims.generateFrameNames('gems', {
-- |     prefix: 'ruby_',
-- |     end: 6,
-- |     zeroPad: 4
-- |   })
-- | });
-- | ```
-- | 
-- | Please see the animation examples for further details.
-- | Parameters:
-- |     key - String - The key for the texture containing the animation frames.
-- |
generateFrameNames :: String -> AnimationManager -> Effect Unit
generateFrameNames = _return1 "generateFrameNames"

-- | Generate an array of {@link Phaser.Types.Animations.AnimationFrame} objects from a texture key and configuration object.
-- | 
-- | Generates objects with numbered frame names, as configured by the given {@link Phaser.Types.Animations.GenerateFrameNumbers}.
-- | 
-- | If you're working with a texture atlas, see the `generateFrameNames` method instead.
-- | 
-- | It's a helper method, designed to make it easier for you to extract frames from sprite sheets.
-- | 
-- | Example:
-- | 
-- | If you have a sprite sheet loaded called `explosion` and it contains 12 frames, then you can call this method using:
-- | 
-- | `this.anims.generateFrameNumbers('explosion', { start: 0, end: 11 })`.
-- | 
-- | The `end` value of 11 tells it to stop after the 12th frame has been added, because it started at zero.
-- | 
-- | To create an animation using this method, you can do:
-- | 
-- | ```javascript
-- | this.anims.create({
-- |   key: 'boom',
-- |   frames: this.anims.generateFrameNames('explosion', {
-- |     start: 0,
-- |     end: 11
-- |   })
-- | });
-- | ```
-- | 
-- | Note that `start` is optional and you don't need to include it if the animation starts from frame 0.
-- | 
-- | To specify an animation in reverse, swap the `start` and `end` values.
-- | 
-- | If the frames are not sequential, you may pass an array of frame numbers instead, for example:
-- | 
-- | `this.anims.generateFrameNumbers('explosion', { frames: [ 0, 1, 2, 1, 2, 3, 4, 0, 1, 2 ] })`
-- | 
-- | Please see the animation examples and `GenerateFrameNumbers` config docs for further details.
-- | Parameters:
-- |     key - String - The key for the texture containing the animation frames.
-- |     config - Phaser.Types.Animations.GenerateFrameNumbers - The configuration object for the animation frames.
-- |
generateFrameNumbers :: String -> GenerateFrameNumbersConfig -> AnimationManager -> Effect Unit
generateFrameNumbers = _return2 "generateFrameNumbers"

-- | Get an Animation.
-- | Parameters:
-- |     key - String - The key of the Animation to retrieve.
-- |
get :: String -> AnimationManager -> Effect Animation
get = _return1 "get"

-- | Returns an array of all Animation keys that are using the given
-- | Texture. Only Animations that have at least one AnimationFrame
-- | entry using this texture will be included in the result.
-- | Parameters:
-- |     key - String - The unique string-based key of the Texture, or a Texture, or Frame instance.
-- |
getAnimsFromTexture :: String -> AnimationManager -> Effect Unit
getAnimsFromTexture = _return1 "getAnimsFromTexture"

-- | Pause all animations.
-- |
pauseAll :: AnimationManager -> Effect AnimationManager
pauseAll = _method0 "pauseAll"

-- | Play an animation on the given Game Objects that have an Animation Component.
-- | Parameters:
-- |     key - String - The string-based key of the animation to play, or an Animation instance, or a `PlayAnimationConfig` object.
-- |     children - Phaser.GameObjects.GameObject - An array of Game Objects to play the animation on. They must have an Animation Component.
-- |
play :: forall go. GameObject go => String -> go -> AnimationManager -> Effect AnimationManager
play = _method2 "play"

-- | Takes an array of Game Objects that have an Animation Component and then
-- | starts the given animation playing on them. The start time of each Game Object
-- | is offset, incrementally, by the `stagger` amount.
-- | 
-- | For example, if you pass an array with 4 children and a stagger time of 1000,
-- | the delays will be:
-- | 
-- | child 1: 1000ms delay
-- | child 2: 2000ms delay
-- | child 3: 3000ms delay
-- | child 4: 4000ms delay
-- | 
-- | If you set the `staggerFirst` parameter to `false` they would be:
-- | 
-- | child 1: 0ms delay
-- | child 2: 1000ms delay
-- | child 3: 2000ms delay
-- | child 4: 3000ms delay
-- | 
-- | You can also set `stagger` to be a negative value. If it was -1000, the above would be:
-- | 
-- | child 1: 3000ms delay
-- | child 2: 2000ms delay
-- | child 3: 1000ms delay
-- | child 4: 0ms delay
-- | Parameters:
-- |     key - String - The string-based key of the animation to play, or an Animation instance, or a `PlayAnimationConfig` object.
-- |     children - Phaser.GameObjects.GameObject - An array of Game Objects to play the animation on. They must have an Animation Component.
-- |     stagger - Number - The amount of time, in milliseconds, to offset each play time by. If a negative value is given, it's applied to the children in reverse order.
-- |
staggerPlay :: forall go. GameObject go => String -> go -> Number -> AnimationManager -> Effect AnimationManager
staggerPlay = _method3 "staggerPlay"

-- | Removes an Animation from this Animation Manager, based on the given key.
-- | 
-- | This is a global action. Once an Animation has been removed, no Game Objects
-- | can carry on using it.
-- | Parameters:
-- |     key - String - The key of the animation to remove.
-- |
remove :: String -> AnimationManager -> Effect Animation
remove = _return1 "remove"

-- | Resume all paused animations.
-- |
resumeAll :: AnimationManager -> Effect AnimationManager
resumeAll = _method0 "resumeAll"

-- | Returns the Animation data as JavaScript object based on the given key.
-- | Or, if not key is defined, it will return the data of all animations as array of objects.
-- |
toJSON :: AnimationManager -> Effect JSONAnimation
toJSON = _return0 "toJSON"

-- | Destroy this Animation Manager and clean up animation definitions and references to other objects.
-- | This method should not be called directly. It will be called automatically as a response to a `destroy` event from the Phaser.Game instance.
-- |
destroy :: AnimationManager -> Effect Unit
destroy = _return0 "destroy"
