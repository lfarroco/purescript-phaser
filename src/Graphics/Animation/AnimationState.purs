module Graphics.Phaser.AnimationState where

-- | (Mostly) autogenerated from https://raw.githubusercontent.com/photonstorm/phaser/master/src/animations/AnimationState.js

import Prelude

import Effect (Effect)
import Graphics.Phaser.Animation (animationsNamsepace)
import Graphics.Phaser.Animation.Types (Animation, AnimationManager, AnimationState, GenerateFrameNumbersConfig, TextureManager)
import Graphics.Phaser.AnimationFrame (AnimationFrame)
import Graphics.Phaser.CoreTypes (class GameObject, PhaserMap)
import Utils.FFI (_getProp, _new1, _return0, _return1, _return2)


-- | The Animation State Component.
-- | 
-- | This component provides features to apply animations to Game Objects. It is responsible for
-- | loading, queuing animations for later playback, mixing between animations and setting
-- | the current animation frame to the Game Object that owns this component.
-- | 
-- | This component lives as an instance within any Game Object that has it defined, such as Sprites.
-- | 
-- | You can access its properties and methods via the `anims` property, i.e. `Sprite.anims`.
-- | 
-- | As well as playing animations stored in the global Animation Manager, this component
-- | can also create animations that are stored locally within it. See the `create` method
-- | for more details.
-- | 
-- | Prior to Phaser 3.50 this component was called just `Animation` and lived in the
-- | `Phaser.GameObjects.Components` namespace. It was renamed to `AnimationState`
-- | in 3.50 to help better identify its true purpose when browsing the documentation.
new :: forall go. GameObject go => go -> Effect AnimationState
new go = do
  fn <- animationsNamsepace >>= _getProp "AnimationState"
  _new1 fn go

-- | The Game Object to which this animation component belongs.
-- | 
-- | You can typically access this component from the Game Object
-- | via the `this.anims` property.
parent :: forall go. GameObject go => AnimationState -> Effect go
parent = _getProp "parent"

-- | A reference to the global Animation Manager.
animationManager :: AnimationState -> Effect AnimationManager
animationManager = _getProp "animationManager"

-- | A reference to the Texture Manager.
textureManager :: AnimationState -> Effect TextureManager
textureManager = _getProp "textureManager"

-- | The Animations stored locally in this Animation component.
-- | 
-- | Do not modify the contents of this Map directly, instead use the
-- | `add`, `create` and `remove` methods of this class instead.
anims :: AnimationState -> Effect (PhaserMap String Animation)
anims = _getProp "anims"

-- | Is an animation currently playing or not?
isPlaying :: AnimationState -> Effect Boolean
isPlaying = _getProp "isPlaying"

-- | Has the current animation started playing, or is it waiting for a delay to expire?
hasStarted :: AnimationState -> Effect Boolean
hasStarted = _getProp "hasStarted"

-- | The current Animation loaded into this Animation component.
-- | 
-- | Will by `null` if no animation is yet loaded.
currentAnim :: AnimationState -> Effect Animation
currentAnim = _getProp "currentAnim"

-- | The current AnimationFrame being displayed by this Animation component.
-- | 
-- | Will by `null` if no animation is yet loaded.
currentFrame :: AnimationState -> Effect AnimationFrame
currentFrame = _getProp "currentFrame"

-- | The key, instance, or config of the next Animation to be loaded into this Animation component
-- | when the current animation completes.
-- | 
-- | Will by `null` if no animation has been queued.
nextAnim :: AnimationState -> Effect String
nextAnim = _getProp "nextAnim"

-- | A queue of Animations to be loaded into this Animation component when the current animation completes.
-- | 
-- | Populate this queue via the `chain` method.
nextAnimsQueue :: AnimationState -> Effect (Array Animation)
nextAnimsQueue = _getProp "nextAnimsQueue"

-- | The Time Scale factor.
-- | 
-- | You can adjust this value to modify the passage of time for the animation that is currently
-- | playing. For example, setting it to 2 will make the animation play twice as fast. Or setting
-- | it to 0.5 will slow the animation down.
-- | 
-- | You can change this value at run-time, or set it via the `PlayAnimationConfig`.
-- | 
-- | Prior to Phaser 3.50 this property was private and called `_timeScale`.
timeScale :: AnimationState -> Effect Number
timeScale = _getProp "timeScale"

-- | The frame rate of playback, of the current animation, in frames per second.
-- | 
-- | This value is set when a new animation is loaded into this component and should
-- | be treated as read-only, as changing it once playback has started will not alter
-- | the animation. To change the frame rate, provide a new value in the `PlayAnimationConfig` object.
frameRate :: AnimationState -> Effect Number
frameRate = _getProp "frameRate"

-- | The duration of the current animation, in milliseconds.
-- | 
-- | This value is set when a new animation is loaded into this component and should
-- | be treated as read-only, as changing it once playback has started will not alter
-- | the animation. To change the duration, provide a new value in the `PlayAnimationConfig` object.
duration :: AnimationState -> Effect Number
duration = _getProp "duration"

-- | The number of milliseconds per frame, not including frame specific modifiers that may be present in the
-- | Animation data.
-- | 
-- | This value is calculated when a new animation is loaded into this component and should
-- | be treated as read-only. Changing it will not alter playback speed.
msPerFrame :: AnimationState -> Effect Number
msPerFrame = _getProp "msPerFrame"

-- | Skip frames if the time lags, or always advanced anyway?
skipMissedFrames :: AnimationState -> Effect Boolean
skipMissedFrames = _getProp "skipMissedFrames"

-- | The delay before starting playback of the current animation, in milliseconds.
-- | 
-- | This value is set when a new animation is loaded into this component and should
-- | be treated as read-only, as changing it once playback has started will not alter
-- | the animation. To change the delay, provide a new value in the `PlayAnimationConfig` object.
-- | 
-- | Prior to Phaser 3.50 this property was private and called `_delay`.
delay :: AnimationState -> Effect Number
delay = _getProp "delay"

-- | The number of times to repeat playback of the current animation.
-- | 
-- | If -1, it means the animation will repeat forever.
-- | 
-- | This value is set when a new animation is loaded into this component and should
-- | be treated as read-only, as changing it once playback has started will not alter
-- | the animation. To change the number of repeats, provide a new value in the `PlayAnimationConfig` object.
-- | 
-- | Prior to Phaser 3.50 this property was private and called `_repeat`.
repeat :: AnimationState -> Effect Number
repeat = _getProp "repeat"

-- | The number of milliseconds to wait before starting the repeat playback of the current animation.
-- | 
-- | This value is set when a new animation is loaded into this component, but can also be modified
-- | at run-time.
-- | 
-- | You can change the repeat delay by providing a new value in the `PlayAnimationConfig` object.
-- | 
-- | Prior to Phaser 3.50 this property was private and called `_repeatDelay`.
repeatDelay :: AnimationState -> Effect Number
repeatDelay = _getProp "repeatDelay"

-- | Should the current animation yoyo? An animation that yoyos will play in reverse, from the end
-- | to the start, before then repeating or completing. An animation that does not yoyo will just
-- | play from the start to the end.
-- | 
-- | This value is set when a new animation is loaded into this component, but can also be modified
-- | at run-time.
-- | 
-- | You can change the yoyo by providing a new value in the `PlayAnimationConfig` object.
-- | 
-- | Prior to Phaser 3.50 this property was private and called `_yoyo`.
yoyo :: AnimationState -> Effect Boolean
yoyo = _getProp "yoyo"

-- | If the animation has a delay set, before playback will begin, this
-- | controls when the first frame is set on the Sprite. If this property
-- | is 'false' then the frame is set only after the delay has expired.
-- | This is the default behavior.
-- | 
-- | If this property is 'true' then the first frame of this animation
-- | is set immediately, and then when the delay expires, playback starts.
showBeforeDelay :: AnimationState -> Effect Boolean
showBeforeDelay = _getProp "showBeforeDelay"

-- | Should the GameObject's `visible` property be set to `true` when the animation starts to play?
-- | 
-- | This will happen _after_ any delay that may have been set.
-- | 
-- | This value is set when a new animation is loaded into this component, but can also be modified
-- | at run-time, assuming the animation is currently delayed.
showOnStart :: AnimationState -> Effect Boolean
showOnStart = _getProp "showOnStart"

-- | Should the GameObject's `visible` property be set to `false` when the animation completes?
-- | 
-- | This value is set when a new animation is loaded into this component, but can also be modified
-- | at run-time, assuming the animation is still actively playing.
hideOnComplete :: AnimationState -> Effect Boolean
hideOnComplete = _getProp "hideOnComplete"

-- | Is the playhead moving forwards (`true`) or in reverse (`false`) ?
forward :: AnimationState -> Effect Boolean
forward = _getProp "forward"

-- | An internal trigger that tells the component if it should plays the animation
-- | in reverse mode ('true') or not ('false'). This is used because `forward` can
-- | be changed by the `yoyo` feature.
-- | 
-- | Prior to Phaser 3.50 this property was private and called `_reverse`.
inReverse :: AnimationState -> Effect Boolean
inReverse = _getProp "inReverse"

-- | Internal time overflow accumulator.
-- | 
-- | This has the `delta` time added to it as part of the `update` step.
accumulator :: AnimationState -> Effect Number
accumulator = _getProp "accumulator"

-- | The time point at which the next animation frame will change.
-- | 
-- | This value is compared against the `accumulator` as part of the `update` step.
nextTick :: AnimationState -> Effect Number
nextTick = _getProp "nextTick"

-- | A counter keeping track of how much delay time, in milliseconds, is left before playback begins.
-- | 
-- | This is set via the `playAfterDelay` method, although it can be modified at run-time
-- | if required, as long as the animation has not already started playing.
delayCounter :: AnimationState -> Effect Number
delayCounter = _getProp "delayCounter"

-- | A counter that keeps track of how many repeats are left to run.
-- | 
-- | This value is set when a new animation is loaded into this component, but can also be modified
-- | at run-time.
repeatCounter :: AnimationState -> Effect Number
repeatCounter = _getProp "repeatCounter"

-- | An internal flag keeping track of pending repeats.
pendingRepeat :: AnimationState -> Effect Boolean
pendingRepeat = _getProp "pendingRepeat"

-- | `true` if the current animation is paused, otherwise `false`.
isPaused :: AnimationState -> Effect Boolean
isPaused = _getProp "isPaused"

-- | Sets an animation, or an array of animations, to be played in the future, after the current one completes or stops.
-- | 
-- | The current animation must enter a 'completed' state for this to happen, i.e. finish all of its repeats, delays, etc,
-- | or have one of the `stop` methods called.
-- | 
-- | An animation set to repeat forever will never enter a completed state unless stopped.
-- | 
-- | You can chain a new animation at any point, including before the current one starts playing, during it, or when it ends (via its `animationcomplete` event).
-- | 
-- | Chained animations are specific to a Game Object, meaning different Game Objects can have different chained animations without impacting the global animation they're playing.
-- | 
-- | Call this method with no arguments to reset all currently chained animations.
-- |
chain    :: forall go. GameObject go => AnimationState -> Effect go
chain = _return0 "chain"

-- | Returns the key of the animation currently loaded into this component.
-- | 
-- | Prior to Phaser 3.50 this method was called `getCurrentKey`.
-- |
getName :: AnimationState -> Effect String
getName = _return0 "getName"

-- | Returns the key of the animation frame currently displayed by this component.
-- |
getFrameName :: AnimationState -> Effect String
getFrameName = _return0 "getFrameName"

-- | Internal method used to load an animation into this component.
-- | Parameters:
-- |     key - String - The string-based key of the animation to play, or a `PlayAnimationConfig` object.
-- |
load    :: forall go. GameObject go => String -> AnimationState -> Effect go
load = _return1 "load"

-- | Pause the current animation and set the `isPlaying` property to `false`.
-- | You can optionally pause it at a specific frame.
-- |
pause    :: forall go. GameObject go => AnimationState -> Effect go
pause = _return0 "pause"

-- | Resumes playback of a paused animation and sets the `isPlaying` property to `true`.
-- | You can optionally tell it to start playback from a specific frame.
-- |
resume   :: forall go. GameObject go => AnimationState -> Effect go
resume = _return0 "resume"

-- | Waits for the specified delay, in milliseconds, then starts playback of the given animation.
-- | 
-- | If the animation _also_ has a delay value set in its config, it will be **added** to the delay given here.
-- | 
-- | If an animation is already running and a new animation is given to this method, it will wait for
-- | the given delay before starting the new animation.
-- | 
-- | If no animation is currently running, the given one begins after the delay.
-- | 
-- | Prior to Phaser 3.50 this method was called 'delayedPlay' and the parameters were in the reverse order.
-- | Parameters:
-- |     key - String - The string-based key of the animation to play, or an Animation instance, or a `PlayAnimationConfig` object.
-- |     delay - Number - The delay, in milliseconds, to wait before starting the animation playing.
-- |
playAfterDelay  :: forall go. GameObject go => String -> Number -> AnimationState -> Effect go
playAfterDelay = _return2 "playAfterDelay"

-- | Waits for the current animation to complete the `repeatCount` number of repeat cycles, then starts playback
-- | of the given animation.
-- | 
-- | You can use this to ensure there are no harsh jumps between two sets of animations, i.e. going from an
-- | idle animation to a walking animation, by making them blend smoothly into each other.
-- | 
-- | If no animation is currently running, the given one will start immediately.
-- | Parameters:
-- |     key - String - The string-based key of the animation to play, or an Animation instance, or a `PlayAnimationConfig` object.
-- |
playAfterRepeat :: forall go. GameObject go => String -> AnimationState -> Effect go
playAfterRepeat = _return1 "playAfterRepeat"

-- | Start playing the given animation on this Sprite.
-- | 
-- | Animations in Phaser can either belong to the global Animation Manager, or specifically to this Sprite.
-- | 
-- | The benefit of a global animation is that multiple Sprites can all play the same animation, without
-- | having to duplicate the data. You can just create it once and then play it on any Sprite.
-- | 
-- | The following code shows how to create a global repeating animation. The animation will be created
-- | from all of the frames within the sprite sheet that was loaded with the key 'muybridge':
-- | 
-- | ```javascript
-- | var config = {
-- |     key: 'run',
-- |     frames: 'muybridge',
-- |     frameRate: 15,
-- |     repeat: -1
-- | };
-- | 
-- | //  This code should be run from within a Scene:
-- | this.anims.create(config);
-- | ```
-- | 
-- | However, if you wish to create an animation that is unique to this Sprite, and this Sprite alone,
-- | you can call the `Animation.create` method instead. It accepts the exact same parameters as when
-- | creating a global animation, however the resulting data is kept locally in this Sprite.
-- | 
-- | With the animation created, either globally or locally, you can now play it on this Sprite:
-- | 
-- | ```javascript
-- | this.add.sprite(x, y).play('run');
-- | ```
-- | 
-- | Alternatively, if you wish to run it at a different frame rate, for example, you can pass a config
-- | object instead:
-- | 
-- | ```javascript
-- | this.add.sprite(x, y).play({ key: 'run', frameRate: 24 });
-- | ```
-- | 
-- | When playing an animation on a Sprite it will first check to see if it can find a matching key
-- | locally within the Sprite. If it can, it will play the local animation. If not, it will then
-- | search the global Animation Manager and look for it there.
-- | 
-- | If you need a Sprite to be able to play both local and global animations, make sure they don't
-- | have conflicting keys.
-- | 
-- | See the documentation for the `PlayAnimationConfig` config object for more details about this.
-- | 
-- | Also, see the documentation in the Animation Manager for further details on creating animations.
-- | Parameters:
-- |     key - String - The string-based key of the animation to play, or an Animation instance, or a `PlayAnimationConfig` object.
-- |
play :: forall go. GameObject go => String -> AnimationState -> Effect go
play = _return1 "play"

-- | Start playing the given animation on this Sprite, in reverse.
-- | 
-- | Animations in Phaser can either belong to the global Animation Manager, or specifically to this Sprite.
-- | 
-- | The benefit of a global animation is that multiple Sprites can all play the same animation, without
-- | having to duplicate the data. You can just create it once and then play it on any Sprite.
-- | 
-- | The following code shows how to create a global repeating animation. The animation will be created
-- | from all of the frames within the sprite sheet that was loaded with the key 'muybridge':
-- | 
-- | ```javascript
-- | var config = {
-- |     key: 'run',
-- |     frames: 'muybridge',
-- |     frameRate: 15,
-- |     repeat: -1
-- | };
-- | 
-- | //  This code should be run from within a Scene:
-- | this.anims.create(config);
-- | ```
-- | 
-- | However, if you wish to create an animation that is unique to this Sprite, and this Sprite alone,
-- | you can call the `Animation.create` method instead. It accepts the exact same parameters as when
-- | creating a global animation, however the resulting data is kept locally in this Sprite.
-- | 
-- | With the animation created, either globally or locally, you can now play it on this Sprite:
-- | 
-- | ```javascript
-- | this.add.sprite(x, y).playReverse('run');
-- | ```
-- | 
-- | Alternatively, if you wish to run it at a different frame rate, for example, you can pass a config
-- | object instead:
-- | 
-- | ```javascript
-- | this.add.sprite(x, y).playReverse({ key: 'run', frameRate: 24 });
-- | ```
-- | 
-- | When playing an animation on a Sprite it will first check to see if it can find a matching key
-- | locally within the Sprite. If it can, it will play the local animation. If not, it will then
-- | search the global Animation Manager and look for it there.
-- | 
-- | If you need a Sprite to be able to play both local and global animations, make sure they don't
-- | have conflicting keys.
-- | 
-- | See the documentation for the `PlayAnimationConfig` config object for more details about this.
-- | 
-- | Also, see the documentation in the Animation Manager for further details on creating animations.
-- | Parameters:
-- |     key - String - The string-based key of the animation to play, or an Animation instance, or a `PlayAnimationConfig` object.
-- |
playReverse      :: forall go. GameObject go => String -> AnimationState -> Effect go
playReverse = _return1 "playReverse"

-- | Load the animation based on the key and set-up all of the internal values
-- | needed for playback to start. If there is no delay, it will also fire the start events.
-- | Parameters:
-- |     key - String - The string-based key of the animation to play, or a `PlayAnimationConfig` object.
-- |
startAnimation     :: forall go. GameObject go => String -> AnimationState -> Effect go
startAnimation = _return1 "startAnimation"

-- | Reverse the Animation that is already playing on the Game Object.
-- |
reverse    :: forall go. GameObject go => AnimationState -> Effect go
reverse = _return0 "reverse"

-- | Returns a value between 0 and 1 indicating how far this animation is through, ignoring repeats and yoyos.
-- | 
-- | The value is based on the current frame and how far that is in the animation, it is not based on
-- | the duration of the animation.
-- |
getProgress :: AnimationState -> Effect Number
getProgress = _return0 "getProgress"

-- | Takes a value between 0 and 1 and uses it to set how far this animation is through playback.
-- | 
-- | Does not factor in repeats or yoyos, but does handle playing forwards or backwards.
-- | 
-- | The value is based on the current frame and how far that is in the animation, it is not based on
-- | the duration of the animation.
-- |
setProgress   :: forall go. GameObject go => AnimationState -> Effect go
setProgress = _return0 "setProgress"

-- | Sets the number of times that the animation should repeat after its first play through.
-- | For example, if repeat is 1, the animation will play a total of twice: the initial play plus 1 repeat.
-- | 
-- | To repeat indefinitely, use -1.
-- | The value should always be an integer.
-- | 
-- | Calling this method only works if the animation is already running. Otherwise, any
-- | value specified here will be overwritten when the next animation loads in. To avoid this,
-- | use the `repeat` property of the `PlayAnimationConfig` object instead.
-- | Parameters:
-- |     value - Number - The number of times that the animation should repeat.
-- |
setRepeat    :: forall go. GameObject go => Number -> AnimationState -> Effect go
setRepeat = _return1 "setRepeat"

-- | Handle the removal of an animation from the Animation Manager.
-- |
globalRemove :: AnimationState -> Effect Unit
globalRemove = _return0 "globalRemove"

-- | Restarts the current animation from its beginning.
-- | 
-- | You can optionally reset the delay and repeat counters as well.
-- | 
-- | Calling this will fire the `ANIMATION_RESTART` event immediately.
-- | 
-- | If you `includeDelay` then it will also fire the `ANIMATION_START` event once
-- | the delay has expired, otherwise, playback will just begin immediately.
-- |
restart   :: forall go. GameObject go => AnimationState -> Effect go
restart = _return0 "restart"

-- | The current animation has completed. This dispatches the `ANIMATION_COMPLETE` event.
-- | 
-- | This method is called by the Animation instance and should not usually be invoked directly.
-- | 
-- | If no animation is loaded, no events will be dispatched.
-- | 
-- | If another animation has been queued for playback, it will be started after the events fire.
-- |
complete  :: forall go. GameObject go => AnimationState -> Effect go
complete = _return0 "complete"

-- | Immediately stops the current animation from playing and dispatches the `ANIMATION_STOP` event.
-- | 
-- | If no animation is running, no events will be dispatched.
-- | 
-- | If there is another animation in the queue (set via the `chain` method) then it will start playing.
-- |
stop :: forall go. GameObject go => AnimationState -> Effect go
stop = _return0 "stop"

-- | Stops the current animation from playing after the specified time delay, given in milliseconds.
-- | 
-- | It then dispatches the `ANIMATION_STOP` event.
-- | 
-- | If no animation is running, no events will be dispatched.
-- | 
-- | If there is another animation in the queue (set via the `chain` method) then it will start playing,
-- | when the current one stops.
-- | Parameters:
-- |     delay - Number - The number of milliseconds to wait before stopping this animation.
-- |
stopAfterDelay   :: forall go. GameObject go => Number -> AnimationState -> Effect go
stopAfterDelay = _return1 "stopAfterDelay"

-- | Stops the current animation from playing when it next repeats.
-- | 
-- | It then dispatches the `ANIMATION_STOP` event.
-- | 
-- | If no animation is running, no events will be dispatched.
-- | 
-- | If there is another animation in the queue (set via the `chain` method) then it will start playing,
-- | when the current one stops.
-- | 
-- | Prior to Phaser 3.50 this method was called `stopOnRepeat` and had no parameters.
-- |
stopAfterRepeat  :: forall go. GameObject go => AnimationState -> Effect go
stopAfterRepeat = _return0 "stopAfterRepeat"

-- | Stops the current animation from playing when it next sets the given frame.
-- | If this frame doesn't exist within the animation it will not stop it from playing.
-- | 
-- | It then dispatches the `ANIMATION_STOP` event.
-- | 
-- | If no animation is running, no events will be dispatched.
-- | 
-- | If there is another animation in the queue (set via the `chain` method) then it will start playing,
-- | when the current one stops.
-- | Parameters:
-- |     frame - Phaser.Animations.AnimationFrame - The frame to check before stopping this animation.
-- |
stopOnFrame :: forall go. GameObject go => AnimationFrame -> AnimationState -> Effect go
stopOnFrame = _return1 "stopOnFrame"

-- | Returns the total number of frames in this animation, or returns zero if no
-- | animation has been loaded.
-- |
getTotalFrames :: AnimationState -> Effect Number
getTotalFrames = _return0 "getTotalFrames"

-- | The internal update loop for the AnimationState Component.
-- | 
-- | This is called automatically by the `Sprite.preUpdate` method.
-- | Parameters:
-- |     time - Number - The current timestamp.
-- |     delta - Number - The delta time, in ms, elapsed since the last frame.
-- |
update :: Number -> Number -> AnimationState -> Effect Unit
update = _return2 "update"

-- | Sets the given Animation Frame as being the current frame
-- | and applies it to the parent Game Object, adjusting size and origin as needed.
-- | Parameters:
-- |     animationFrame - Phaser.Animations.AnimationFrame - The animation frame to change to.
-- |
setCurrentFrame   :: forall go. GameObject go => AnimationFrame -> AnimationState -> Effect go
setCurrentFrame = _return1 "setCurrentFrame"

-- | Advances the animation to the next frame, regardless of the time or animation state.
-- | If the animation is set to repeat, or yoyo, this will still take effect.
-- | 
-- | Calling this does not change the direction of the animation. I.e. if it was currently
-- | playing in reverse, calling this method doesn't then change the direction to forwards.
-- |
nextFrame  :: forall go. GameObject go => AnimationState -> Effect go
nextFrame = _return0 "nextFrame"

-- | Advances the animation to the previous frame, regardless of the time or animation state.
-- | If the animation is set to repeat, or yoyo, this will still take effect.
-- | 
-- | Calling this does not change the direction of the animation. I.e. if it was currently
-- | playing in forwards, calling this method doesn't then change the direction to backwards.
-- |
previousFrame :: forall go. GameObject go => AnimationState -> Effect go
previousFrame = _return0 "previousFrame"

-- | Get an Animation instance that has been created locally on this Sprite.
-- | 
-- | See the `create` method for more details.
-- | Parameters:
-- |     key - String - The key of the Animation to retrieve.
-- |
get :: String -> AnimationState -> Effect Animation
get = _return1 "get"

-- | Checks to see if the given key is already used locally within the animations stored on this Sprite.
-- | Parameters:
-- |     key - String - The key of the Animation to check.
-- |
exists :: String -> AnimationState -> Effect Boolean
exists = _return1 "exists"

-- | Creates a new Animation that is local specifically to this Sprite.
-- | 
-- | When a Sprite owns an animation, it is kept out of the global Animation Manager, which means
-- | you're free to use keys that may be already defined there. Unless you specifically need a Sprite
-- | to have a unique animation, you should favor using global animations instead, as they allow for
-- | the same animation to be used across multiple Sprites, saving on memory. However, if this Sprite
-- | is the only one to use this animation, it's sensible to create it here.
-- | 
-- | If an invalid key is given this method will return `false`.
-- | 
-- | If you pass the key of an animation that already exists locally, that animation will be returned.
-- | 
-- | A brand new animation is only created if the key is valid and not already in use by this Sprite.
-- | 
-- | If you wish to re-use an existing key, call the `remove` method first, then this method.
-- | Parameters:
-- |     config - Phaser.Types.Animations.Animation - The configuration settings for the Animation.
-- |
create :: Animation -> AnimationState -> Effect Unit
create = _return1 "create"

-- | Create one, or more animations from a loaded Aseprite JSON file.
-- | 
-- | Aseprite is a powerful animated sprite editor and pixel art tool.
-- | 
-- | You can find more details at https://www.aseprite.org/
-- | 
-- | To export a compatible JSON file in Aseprite, please do the following:
-- | 
-- | 1. Go to "File - Export Sprite Sheet"
-- | 
-- | 2. On the **Layout** tab:
-- | 2a. Set the "Sheet type" to "Packed"
-- | 2b. Set the "Constraints" to "None"
-- | 2c. Check the "Merge Duplicates" checkbox
-- | 
-- | 3. On the **Sprite** tab:
-- | 3a. Set "Layers" to "Visible layers"
-- | 3b. Set "Frames" to "All frames", unless you only wish to export a sub-set of tags
-- | 
-- | 4. On the **Borders** tab:
-- | 4a. Check the "Trim Sprite" and "Trim Cells" options
-- | 4b. Ensure "Border Padding", "Spacing" and "Inner Padding" are all > 0 (1 is usually enough)
-- | 
-- | 5. On the **Output** tab:
-- | 5a. Check "Output File", give your image a name and make sure you choose "png files" as the file type
-- | 5b. Check "JSON Data" and give your json file a name
-- | 5c. The JSON Data type can be either a Hash or Array, Phaser doesn't mind.
-- | 5d. Make sure "Tags" is checked in the Meta options
-- | 5e. In the "Item Filename" input box, make sure it says just "{frame}" and nothing more.
-- | 
-- | 6. Click export
-- | 
-- | This was tested with Aseprite 1.2.25.
-- | 
-- | This will export a png and json file which you can load using the Aseprite Loader, i.e.:
-- | 
-- | ```javascript
-- | function preload ()
-- | {
-- |     this.load.path = 'assets/animations/aseprite/';
-- |     this.load.aseprite('paladin', 'paladin.png', 'paladin.json');
-- | }
-- | ```
-- | 
-- | Once loaded, you can call this method on a Sprite with the 'atlas' key:
-- | 
-- | ```javascript
-- | const sprite = this.add.sprite(400, 300);
-- | 
-- | sprite.anims.createFromAseprite('paladin');
-- | ```
-- | 
-- | Any animations defined in the JSON will now be available to use on this Sprite and you play them
-- | via their Tag name. For example, if you have an animation called 'War Cry' on your Aseprite timeline,
-- | you can play it on the Sprite using that Tag name:
-- | 
-- | ```javascript
-- | const sprite = this.add.sprite(400, 300);
-- | 
-- | sprite.anims.createFromAseprite('paladin');
-- | 
-- | sprite.play('War Cry');
-- | ```
-- | 
-- | When calling this method you can optionally provide an array of tag names, and only those animations
-- | will be created. For example:
-- | 
-- | ```javascript
-- | sprite.anims.createFromAseprite('paladin', [ 'step', 'War Cry', 'Magnum Break' ]);
-- | ```
-- | 
-- | This will only create the 3 animations defined. Note that the tag names are case-sensitive.
-- | Parameters:
-- |     key - String - The key of the loaded Aseprite atlas. It must have been loaded prior to calling this method.
-- |
createFromAseprite :: String -> AnimationState -> Effect Unit
createFromAseprite = _return1 "createFromAseprite"

-- | Generate an array of {@link Phaser.Types.Animations.AnimationFrame} objects from a texture key and configuration object.
-- | 
-- | Generates objects with string based frame names, as configured by the given {@link Phaser.Types.Animations.GenerateFrameNames}.
-- | 
-- | It's a helper method, designed to make it easier for you to extract all of the frame names from texture atlases.
-- | If you're working with a sprite sheet, see the `generateFrameNumbers` method instead.
-- | 
-- | Example:
-- | 
-- | If you have a texture atlases loaded called `gems` and it contains 6 frames called `ruby_0001`, `ruby_0002`, and so on,
-- | then you can call this method using: `this.anims.generateFrameNames('gems', { prefix: 'ruby_', end: 6, zeroPad: 4 })`.
-- | 
-- | The `end` value tells it to look for 6 frames, incrementally numbered, all starting with the prefix `ruby_`. The `zeroPad`
-- | value tells it how many zeroes pad out the numbers. To create an animation using this method, you can do:
-- | 
-- | ```javascript
-- | this.anims.create({
-- |   key: 'ruby',
-- |   repeat: -1,
-- |   frames: this.anims.generateFrameNames('gems', {
-- |     prefix: 'ruby_',
-- |     end: 6,
-- |     zeroPad: 4
-- |   })
-- | });
-- | ```
-- | 
-- | Please see the animation examples for further details.
-- | Parameters:
-- |     key - String - The key for the texture containing the animation frames.
-- |
generateFrameNames :: String -> AnimationState -> Effect Unit
generateFrameNames = _return1 "generateFrameNames"

-- | Generate an array of {@link Phaser.Types.Animations.AnimationFrame} objects from a texture key and configuration object.
-- | 
-- | Generates objects with numbered frame names, as configured by the given {@link Phaser.Types.Animations.GenerateFrameNumbers}.
-- | 
-- | If you're working with a texture atlas, see the `generateFrameNames` method instead.
-- | 
-- | It's a helper method, designed to make it easier for you to extract frames from sprite sheets.
-- | If you're working with a texture atlas, see the `generateFrameNames` method instead.
-- | 
-- | Example:
-- | 
-- | If you have a sprite sheet loaded called `explosion` and it contains 12 frames, then you can call this method using:
-- | `this.anims.generateFrameNumbers('explosion', { start: 0, end: 12 })`.
-- | 
-- | The `end` value tells it to stop after 12 frames. To create an animation using this method, you can do:
-- | 
-- | ```javascript
-- | this.anims.create({
-- |   key: 'boom',
-- |   frames: this.anims.generateFrameNames('explosion', {
-- |     start: 0,
-- |     end: 12
-- |   })
-- | });
-- | ```
-- | 
-- | Note that `start` is optional and you don't need to include it if the animation starts from frame 0.
-- | 
-- | To specify an animation in reverse, swap the `start` and `end` values.
-- | 
-- | If the frames are not sequential, you may pass an array of frame numbers instead, for example:
-- | 
-- | `this.anims.generateFrameNumbers('explosion', { frames: [ 0, 1, 2, 1, 2, 3, 4, 0, 1, 2 ] })`
-- | 
-- | Please see the animation examples and `GenerateFrameNumbers` config docs for further details.
-- | Parameters:
-- |     key - String - The key for the texture containing the animation frames.
-- |     config - Phaser.Types.Animations.GenerateFrameNumbers - The configuration object for the animation frames.
-- |
generateFrameNumbers :: String -> GenerateFrameNumbersConfig -> AnimationState -> Effect Unit
generateFrameNumbers = _return2 "generateFrameNumbers"

-- | Removes a locally created Animation from this Sprite, based on the given key.
-- | 
-- | Once an Animation has been removed, this Sprite cannot play it again without re-creating it.
-- | Parameters:
-- |     key - String - The key of the animation to remove.
-- |
remove :: String -> AnimationState -> Effect Animation
remove = _return1 "remove"

-- | Destroy this Animation component.
-- | 
-- | Unregisters event listeners and cleans up its references.
-- |
destroy :: AnimationState -> Effect Unit
destroy = _return0 "destroy"
